

//создаем переменную с помощью которой будем работать через dom с контейнером
const todosNode = document.querySelector('.js-todos');

//создаем переменную с помощью которой будем работать через dom с текстовым полем input
const inputNode = document.querySelector('.js-input');

//создаем переменную с помощью которой будем работать через dom с кнопкой добавления
const btnNode = document.querySelector('.js-btn');

let todos = []; //массив ToDo


//функция которая позваляет добавлять в массив ToDo новые задачи. в скобках указан text то есть должен принимать текст задачи 
function addTodo (text){
  //тут создаю уникальное тело каждой задачи(то есть глобальный массив)
    const todo = {
        text,
        done:false, //сделана задача или нет по умолч false
        id: `${Math.random()}` //это означает что при создании задачи ей будет присвоен уникальный (рандомный) индефикатор
    };
    todos.push(todo); //добавление задачи
}

//функция удаление задач он принимает в скобках id то есть индифкатор конкретной задачи
function deleteTodo (id) {
    todos.forEach(todo =>{  //здесь цикл спомощью которого мы пробегаем по массиву  ищем нужную задачу  и  меняем статус
        if(todo.id === id) { //если переданный id совпадает с нужным то мы меняем статус done
            todo.done = true;
        }

    })
}

function render (){
    console.log(todos);
    let html = ''; //формируем html по умолчанию пустая строка

    todos.forEach(todo =>{ //проходим циклом по задачам
        if (todo.done) { //если задача выполнена то выводить не будем
            return;
        };

        //это и есть тот самый вывод задачи в контейнер.И кнопка с помощью которой удаляется определнная задача
        html += 
        `<div>
           ${todo.text}
           <button data-id ='${todo.id}'>Сделанно</button> 
        </div>
        `;  

    })


    todosNode.innerHTML = html; //выводим задачи в контейнер div  . todosNode это как раз та переменная которую мы создавали выше .innerHTML изменение текста 
}


//обработчик события спомощью которого мы добавляем задачу по нажатию на кнопку извелекая текст из input
btnNode.addEventListener('click', () => {
    const text = inputNode.value; //актульный текст из поле ввода input

    addTodo(text); //вызов функции которая добавит задачу

    render(); //вызов функции которая отрисует актуальность состояние данных
});  

//обработчик удаления задачи
todosNode.addEventListener('click' , (event) =>{
    if(event.target.tagName !== 'BUTTON') { //проверяем была ли нажата кнопка
        return;
    }

    const id = event.target.dataset.id; //достаем id задачи по которой кликнули
    deleteTodo(id); //функция удаления задачи по id

    render();//вызов функции которая отрисует актуальность состояние данных
});


render(); //вызов функции которая отрисовала актуальное состояние данных